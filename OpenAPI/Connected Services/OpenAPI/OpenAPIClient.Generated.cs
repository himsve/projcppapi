//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace OpenAPI.OpenAPI
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class TransformerClient 
    {
        // private string _baseUrl = "/transformering/v1";
        private string _baseUrl = "https://ws.geonorge.no/transformering/v1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TransformerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Transformer</summary>
        /// <param name="x">Lengdegrad / øst / X</param>
        /// <param name="y">Breddegrad / nord / Y</param>
        /// <param name="fra">Fra-EPSG-kode</param>
        /// <param name="til">Til-EPSG-kode</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TransformResult> GetAsync(double x, double y, Epsg fra, Epsg til)
        {
            return GetAsync(x, y, fra, til, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Transformer</summary>
        /// <param name="x">Lengdegrad / øst / X</param>
        /// <param name="y">Breddegrad / nord / Y</param>
        /// <param name="fra">Fra-EPSG-kode</param>
        /// <param name="til">Til-EPSG-kode</param>
        /// <returns>Successful Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TransformResult> GetAsync(double x, double y, Epsg fra, Epsg til, System.Threading.CancellationToken cancellationToken)
        {
            if (x == null)
                throw new System.ArgumentNullException("x");
    
            if (y == null)
                throw new System.ArgumentNullException("y");
    
            if (fra == null)
                throw new System.ArgumentNullException("fra");
    
            if (til == null)
                throw new System.ArgumentNullException("til");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/transformer?");
            urlBuilder_.Append("x=").Append(System.Uri.EscapeDataString(ConvertToString(x, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("y=").Append(System.Uri.EscapeDataString(ConvertToString(y, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fra=").Append(System.Uri.EscapeDataString(ConvertToString(fra, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("til=").Append(System.Uri.EscapeDataString(ConvertToString(til, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TransformResult); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TransformResult>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "422") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HTTPValidationError); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HTTPValidationError>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<HTTPValidationError>("Validation Error", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TransformResult);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class ProjeksjonerClient 
    {
        private string _baseUrl = "/transformering/v1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ProjeksjonerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Koordinatsystemer</summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpsgItem>> GetAsync()
        {
            return GetAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Koordinatsystemer</summary>
        /// <returns>Successful Response</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EpsgItem>> GetAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/projeksjoner");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.ICollection<EpsgItem>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.ICollection<EpsgItem>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<EpsgItem>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>An enumeration.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public enum Epsg
    {
        [System.Runtime.Serialization.EnumMember(Value = @"4258")]
        _4258 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25831")]
        _25831 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25832")]
        _25832 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25833")]
        _25833 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25834")]
        _25834 = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25835")]
        _25835 = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"25836")]
        _25836 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5105")]
        _5105 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5106")]
        _5106 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5107")]
        _5107 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5108")]
        _5108 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5109")]
        _5109 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5110")]
        _5110 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5111")]
        _5111 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5112")]
        _5112 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5113")]
        _5113 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5114")]
        _5114 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5115")]
        _5115 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5116")]
        _5116 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5117")]
        _5117 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5118")]
        _5118 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5119")]
        _5119 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5120")]
        _5120 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5121")]
        _5121 = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5122")]
        _5122 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5123")]
        _5123 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5124")]
        _5124 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5125")]
        _5125 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5126")]
        _5126 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5127")]
        _5127 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5128")]
        _5128 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5129")]
        _5129 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"5130")]
        _5130 = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4273")]
        _4273 = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27391")]
        _27391 = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27392")]
        _27392 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27393")]
        _27393 = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27394")]
        _27394 = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27395")]
        _27395 = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27396")]
        _27396 = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27397")]
        _27397 = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"27398")]
        _27398 = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4230")]
        _4230 = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23031")]
        _23031 = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23032")]
        _23032 = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23033")]
        _23033 = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23034")]
        _23034 = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23035")]
        _23035 = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"23036")]
        _23036 = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"4326")]
        _4326 = 49,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class EpsgItem 
    {
        [Newtonsoft.Json.JsonProperty("epsg", Required = Newtonsoft.Json.Required.Always)]
        public int Epsg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Info { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static EpsgItem FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<EpsgItem>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class HTTPValidationError 
    {
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ValidationError> Detail { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HTTPValidationError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HTTPValidationError>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class TransformResult 
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public double X { get; set; }
    
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public double Y { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransformResult FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransformResult>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.13.22.0 (Newtonsoft.Json v12.0.0.2)")]
    public partial class ValidationError 
    {
        [Newtonsoft.Json.JsonProperty("loc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Loc { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Msg { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ValidationError FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidationError>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.0.15.0 (NJsonSchema v9.13.22.0 (Newtonsoft.Json v12.0.0.2))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}